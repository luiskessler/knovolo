generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model Invoice {
    id              String        @id @default(cuid())
    billingEntityId String
    amount          Int
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @default(now()) @updatedAt
    BillingEntity   BillingEntity @relation(fields: [billingEntityId], references: [id])
}

model BillingEntity {
    id                String            @id @default(cuid())
    stripeCustomer    String
    billingAddress    String
    billingCountry    String
    billingCity       String
    billingPostalCode String
    billingName       String
    invoiceEmail      String
    taxId             String?
    billableSeats     Int               @default(1)
    paymentType       PaymentType       @default(invoice)
    paymentPlanStatus PaymentPlanStatus @default(onboarding)
    paymentPlan       PaymentPlan?      @relation(fields: [paymentPlanId], references: [id])
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt
    paymentMethods    PaymentMethod[]

    invoices      Invoice[]
    organization  Organization[]
    paymentPlanId String
}

enum PaymentPlanStatus {
    onboarding
    team
    growth
    accelerate
    team_pending_payment_information
    growth_pending_payment_information
    accelerate_pending_payment_information
    custom
}

model PaymentPlan {
    id            String          @id @default(cuid())
    name          String
    description   String
    price         Int
    features      String[]
    seatsMin      Int
    seatsMax      Int
    BillingEntity BillingEntity[]
}

enum PaymentType {
    invoice
    automatic
}

model PaymentMethod {
    id                    String   @id @default(cuid())
    stripePaymentMethodID String
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt

    BillingEntity   BillingEntity? @relation(fields: [billingEntityId], references: [id])
    billingEntityId String?
}

model Organization {
    id              String               @id @default(cuid())
    name            String               @unique
    slug            String               @unique
    createdAt       DateTime             @default(now())
    updatedAt       DateTime             @updatedAt
    status          OrganizationStatus   @default(pending)
    bucket          String?
    Domain          Domain[]
    Embedding       Embedding[]
    InviteToken     InviteToken[]
    jwtTokens       JwtTokens[]
    emails          OrganizationEmails[]
    Path            Path[]
    Question        Question[]
    users           User[]
    Document        Document[]
    billingEntity   BillingEntity?       @relation(fields: [billingEntityId], references: [id])
    billingEntityId String?
}

model Document {
    id             String       @id @default(uuid())
    title          String
    content        String
    docUrl         String?
    userId         String
    organizationId String
    keywords       String[]
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    Embedding      Embedding[]
    organization   Organization @relation(fields: [organizationId], references: [id])
    user           User         @relation(fields: [userId], references: [id])

    @@index([organizationId])
    @@map("documents")
}

model Domain {
    id             String       @id @default(cuid())
    domain         String
    organizationId String
    userId         String
    createdAt      DateTime     @default(now())
    organization   Organization @relation(fields: [organizationId], references: [id])
    user           User         @relation(fields: [userId], references: [id])
}

model User {
    id             String        @id @default(cuid())
    name           String?
    surname        String?
    email          String        @unique
    role           Role          @default(user)
    password       String?
    organizationId String
    department     String[]
    status         UserStatus    @default(invited)
    createdAt      DateTime      @default(now())
    Answer         Answer[]
    Domain         Domain[]
    InviteToken    InviteToken[]
    jwtTokens      JwtTokens[]
    paths          Path[]
    Question       Question[]
    organization   Organization  @relation(fields: [organizationId], references: [id])
    emails         UserEmails[]
    Vote           Vote[]
    Document       Document[]
}

model Path {
    id             String       @id @default(cuid())
    name           String
    category       String
    rating         Float
    pathData       Json
    slug           String       @unique
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    userId         String
    organizationId String
    Embedding      Embedding[]
    organization   Organization @relation(fields: [organizationId], references: [id])
    user           User         @relation(fields: [userId], references: [id])
}

model InviteToken {
    id             String       @id @default(cuid())
    token          String       @unique
    organizationId String
    userId         String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    expiresAt      DateTime
    status         TokenStatus  @default(active)
    organization   Organization @relation(fields: [organizationId], references: [id])
    user           User         @relation(fields: [userId], references: [id])
}

model JwtTokens {
    id             String          @id @default(cuid())
    token          String          @unique
    state          JWTTokenStatus  @default(active)
    purpose        JWTTokenPurpose
    createdAt      DateTime        @default(now())
    userId         String?
    organizationId String?
    organization   Organization?   @relation(fields: [organizationId], references: [id])
    user           User?           @relation(fields: [userId], references: [id])

    @@unique([userId, organizationId], name: "jwtTokens_userId_organizationId")
}

model OrganizationEmails {
    id             String        @id @default(cuid())
    type           OrgEmailTypes
    organizationId String
    createdAt      DateTime      @default(now())
    organization   Organization  @relation(fields: [organizationId], references: [id])
}

model UserEmails {
    id        String         @id @default(cuid())
    type      UserEmailTypes
    userId    String
    createdAt DateTime       @default(now())
    user      User           @relation(fields: [userId], references: [id])
}

model Question {
    id             String         @id @default(cuid())
    title          String
    content        String
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    organizationId String
    authorId       String
    files          String[]
    status         QuestionStatus @default(active)
    answers        Answer[]
    author         User           @relation(fields: [authorId], references: [id])
    organization   Organization   @relation(fields: [organizationId], references: [id])
    votes          Vote[]
}

model Answer {
    id         String      @id @default(cuid())
    content    String
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    questionId String
    authorId   String
    parentId   String?
    author     User        @relation(fields: [authorId], references: [id])
    parent     Answer?     @relation("AnswerReplies", fields: [parentId], references: [id])
    replies    Answer[]    @relation("AnswerReplies")
    question   Question    @relation(fields: [questionId], references: [id])
    Embedding  Embedding[]
    votes      Vote[]
}

model Vote {
    id         String    @id @default(cuid())
    type       VoteType
    userId     String
    questionId String?
    answerId   String?
    answer     Answer?   @relation(fields: [answerId], references: [id])
    question   Question? @relation(fields: [questionId], references: [id])
    user       User      @relation(fields: [userId], references: [id])

    @@unique([userId, questionId])
    @@unique([userId, answerId])
}

model Embedding {
    id             String                      @id @default(cuid())
    text           String
    embedding      Unsupported("vector(768)")?
    createdAt      DateTime                    @default(now())
    updatedAt      DateTime                    @updatedAt
    organizationId String
    pathId         String?
    documentId     String?
    answerId       String?
    sourceType     EmbeddingSourceType
    answer         Answer?                     @relation(fields: [answerId], references: [id])
    document       Document?                   @relation(fields: [documentId], references: [id])
    organization   Organization                @relation(fields: [organizationId], references: [id])
    path           Path?                       @relation(fields: [pathId], references: [id])

    @@index([pathId])
    @@index([documentId])
    @@index([answerId])
}

enum OrganizationStatus {
    onboarding
    pending
    active
    inactive
    trial
    trial_ended
}

enum Role {
    user
    admin
}

enum UserStatus {
    invited
    active
    disabled
}

enum TokenStatus {
    active
    used
}

enum JWTTokenStatus {
    active
    used
    revoked
}

enum JWTTokenPurpose {
    userPasswordReset
    orgVerifyOrganization
}

enum OrgEmailTypes {
    orgVerifyOrg
    orgVerifyConfirmWelcome
    orgUserAdded
    orgReminderActivationSevenDays
    orgReminderActivationMarkedForDeletion
    orgTrialPeriodEndingSoon
    orgTrialPeriodEnded
    orgPaymentInformationSet
    orgPaymentInformationUpdated
}

enum UserEmailTypes {
    userInvite
    userPasswordResetLink
    userPasswordResetConfirm
    userWelcomeAfterSignup
}

enum QuestionStatus {
    active
    solved
    inactive
}

enum VoteType {
    UP
    DOWN
}

enum EmbeddingSourceType {
    PATH
    DOCUMENT
    ANSWER
}

model Newsletter {
    id        String   @id @default(cuid())
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
